import { Button, VerticalBox, LineEdit, ComboBox, StandardButton } from "std-widgets.slint";
import {ErrorDialog} from "./components/ErrorDialog.slint";
export component TempConvWindow inherits Window {
    title: "Temp Converter";
    in property<string> result: "";
    in property<string> result2: "";
    in-out property<string> error-type-string: "Error";
    in-out property<string> error-text-value: "";
    out property<[string]> input-unit-list: ["C","F","K"];
    callback request-convert-temp(string,string);
    callback error-closed();
    callback show-error-popup();
    forward-focus: temp-input;

    show-error-popup => {
        error-display.show-error-dialog();
        }


    
    error-display := ErrorDialog {
        background: parent.background;
        error-text-value: parent.error-text-value;
        error-type-string: parent.error-type-string;

        }

    GridLayout {
        padding: 15px;
        spacing: 10px;
        Row {
          temp-text :=  Text {
                text: "Enter Temperature";
                horizontal-alignment: center;
                }
            }
        Row {
          temp-input :=  LineEdit {
                font-size: 16px;
                width: unitin.preferred-width;
                height: 35px;
                placeholder-text: "input here";
                horizontal-alignment: center;
                accepted => {
                    root.request-convert-temp(self.text,unitin.current-value);
                    }
                }
            }
        Row {
            Text{
                text: "Input unit";
                horizontal-alignment: center;
                }
            }
        Row {
            unitin :=  ComboBox {
                width: self.preferred-width;
                height: self.preferred-height;
                model: root.input-unit-list;
                selected => {
                    temp-input.focus();
                    }
                }

            }
        Row {
            result := Text {
                text: root.result;
                color: green;
                font-size: 16px;
                horizontal-alignment: center;
                }
            }
        Row {
            result2 :=   Text {
                text: root.result2;
                color: blue;
                font-size: 16px;
                horizontal-alignment: center;
                }
            }
        Row {
            Button {
                text: "Convert";
                clicked => {
                    root.request-convert-temp(temp-input.text,unitin.current-value);
                }
                }
            }
        }
        


}
